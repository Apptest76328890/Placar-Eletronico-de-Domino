// Nome do cache
const CACHE_NAME = 'placar-dominio-v1';

// Arquivos essenciais para o funcionamento offline
const FILES_TO_CACHE = [
  '/Placar-Eletronico-de-Domino/index.html',         // Arquivo principal
  '/Placar-Eletronico-de-Domino/style.css',          // Arquivo de estilo
  '/Placar-Eletronico-de-Domino/script.js',          // Script JavaScript
  '/Placar-Eletronico-de-Domino/icon-192x192.png',   // Ícone de 192x192
  '/Placar-Eletronico-de-Domino/icon-512x512.png',   // Ícone de 512x512
  '/Placar-Eletronico-de-Domino/icon-undo.png',      // Ícone de desfazer
  '/Placar-Eletronico-de-Domino/manifest.json',      // Manifesto PWA
];

// Durante a instalação do service worker, os arquivos serão armazenados no cache
self.addEventListener('install', (event) => {
  event.waitUntil(
    caches.open(CACHE_NAME).then((cache) => {
      console.log('Arquivos adicionados ao cache!');
      return cache.addAll(FILES_TO_CACHE);
    })
  );
});

// Durante a ativação do service worker, removemos caches antigos
self.addEventListener('activate', (event) => {
  event.waitUntil(
    caches.keys().then((cacheNames) => {
      return Promise.all(
        cacheNames.map((cache) => {
          if (cache !== CACHE_NAME) {
            console.log('Cache antigo removido:', cache);
            return caches.delete(cache);
          }
        })
      );
    })
  );
});

// Durante o fetch, tenta responder com arquivos do cache ou da rede, se necessário
self.addEventListener('fetch', (event) => {
  // Detecta se está online ou offline
  const isOnline = navigator.onLine;

  event.respondWith(
    // Se estiver online, tenta buscar os recursos pela URL completa
    isOnline 
      ? fetch(event.request).then((networkResponse) => {
          // Se a resposta da rede for válida, armazene no cache
          if (networkResponse && networkResponse.ok) {
            caches.open(CACHE_NAME).then((cache) => {
              cache.put(event.request, networkResponse.clone());
            });
          }
          return networkResponse;
        }).catch(() => {
          // Caso o fetch falhe (em offline, por exemplo), busca no cache
          return caches.match(event.request).then((cachedResponse) => {
            // Se o arquivo estiver no cache, retorne-o
            if (cachedResponse) {
              return cachedResponse;
            }
            // Para HTML, devolve sempre o index.html armazenado no cache
            if (event.request.url.endsWith('.html')) {
              return caches.match('/Placar-Eletronico-de-Domino/index.html');
            }
            // Para arquivos CSS e JS, devolve os correspondentes no cache
            if (event.request.url.endsWith('.css')) {
              return caches.match('/Placar-Eletronico-de-Domino/style.css');
            }
            if (event.request.url.endsWith('.js')) {
              return caches.match('/Placar-Eletronico-de-Domino/script.js');
            }
            // Para outros arquivos, retorna um erro 404
            return new Response('Arquivo offline não encontrado', {
              status: 404,
              statusText: 'Not Found',
            });
          });
        })
      // Se estiver offline, tenta sempre buscar do cache
      : caches.match(event.request).then((cachedResponse) => {
          if (cachedResponse) {
            return cachedResponse;
          }

          // Caso esteja offline e não tenha o arquivo em cache, tenta fallback
          if (event.request.url.endsWith('.html')) {
            return caches.match('/Placar-Eletronico-de-Domino/index.html');
          }
          if (event.request.url.endsWith('.css')) {
            return caches.match('/Placar-Eletronico-de-Domino/style.css');
          }
          if (event.request.url.endsWith('.js')) {
            return caches.match('/Placar-Eletronico-de-Domino/script.js');
          }

          // Retorna erro 404 se não encontrar nada no cache
          return new Response('Arquivo offline não encontrado', {
            status: 404,
            statusText: 'Not Found',
          });
        })
  );
});
