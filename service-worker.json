// Nome do cache
const CACHE_NAME = 'placar-dominio-v1';

// URLs completas para o conteúdo online (com HTTPS)
const FILES_TO_CACHE = [
  'https://store-app.github.io/Placar-Eletronico-de-Domino/index.html',        // Arquivo principal
  'https://store-app.github.io/Placar-Eletronico-de-Domino/style.css',         // Arquivo de estilo
  'https://store-app.github.io/Placar-Eletronico-de-Domino/script.js',         // Script JavaScript
  'https://store-app.github.io/Placar-Eletronico-de-Domino/icon-192x192.png',  // Ícone de 192x192
  'https://store-app.github.io/Placar-Eletronico-de-Domino/icon-512x512.png',  // Ícone de 512x512
  'https://store-app.github.io/Placar-Eletronico-de-Domino/icon-undo.png',     // Ícone de desfazer
  'https://store-app.github.io/Placar-Eletronico-de-Domino/manifest.json',     // Manifesto PWA
];

// Durante a instalação do service worker, os arquivos serão armazenados no cache
self.addEventListener('install', (event) => {
  event.waitUntil(
    caches.open(CACHE_NAME).then((cache) => {
      console.log('Arquivos adicionados ao cache!');
      return cache.addAll(FILES_TO_CACHE); // Faz o download e armazena os arquivos no cache
    })
  );
});

// Durante a ativação do service worker, removemos caches antigos
self.addEventListener('activate', (event) => {
  event.waitUntil(
    caches.keys().then((cacheNames) => {
      return Promise.all(
        cacheNames.map((cache) => {
          if (cache !== CACHE_NAME) {
            console.log('Cache antigo removido:', cache);
            return caches.delete(cache); // Remove caches antigos
          }
        })
      );
    })
  );
});

// Durante o fetch, tentamos responder com arquivos do cache ou da rede, se necessário
self.addEventListener('fetch', (event) => {
  // Verificar se a requisição é feita pela primeira vez ou se é necessário verificar por atualizações
  event.respondWith(
    caches.match(event.request).then((cachedResponse) => {
      // Se a requisição for encontrada no cache, serve ela diretamente
      if (cachedResponse) {
        return cachedResponse;
      }

      // Caso contrário, tenta fazer a requisição na rede (online)
      return fetch(event.request).then((networkResponse) => {
        // Se a resposta da rede for válida, armazena no cache
        if (networkResponse && networkResponse.ok) {
          caches.open(CACHE_NAME).then((cache) => {
            cache.put(event.request, networkResponse.clone()); // Atualiza o cache
          });
        }
        return networkResponse; // Retorna a resposta da rede
      });
    })
  );
});

// Função para atualizar o conteúdo periodicamente (para baixar novas versões)
setInterval(() => {
  self.registration.update(); // Faz uma nova verificação e atualização do Service Worker
}, 1000 * 60 * 60 * 24 * 7); // A cada 1 semana (1 semana * 7 dias * 24 horas * 60 minutos * 60 segundos * 1000 milissegundos)
