// Nome do cache
const CACHE_NAME = 'placar-dominio-v1';

// URLs completas para o conteúdo online
const FILES_TO_CACHE = [
  'https://store-app.github.io/Placar-Eletronico-de-Domino/index.html',        // Arquivo principal
  'https://store-app.github.io/Placar-Eletronico-de-Domino/style.css',         // Arquivo de estilo
  'https://store-app.github.io/Placar-Eletronico-de-Domino/script.js',         // Script JavaScript
  'https://store-app.github.io/Placar-Eletronico-de-Domino/icon-192x192.png',  // Ícone de 192x192
  'https://store-app.github.io/Placar-Eletronico-de-Domino/icon-512x512.png',  // Ícone de 512x512
  'https://store-app.github.io/Placar-Eletronico-de-Domino/icon-undo.png',     // Ícone de desfazer
  'https://store-app.github.io/Placar-Eletronico-de-Domino/manifest.json',     // Manifesto PWA
];

// Chave para armazenar a última data de atualização
const LAST_UPDATE_KEY = 'last-update';

// Durante a instalação do Service Worker, os arquivos serão armazenados no cache
self.addEventListener('install', (event) => {
  event.waitUntil(
    caches.open(CACHE_NAME).then((cache) => {
      console.log('Baixando arquivos para o cache pela primeira vez...');
      return cache.addAll(FILES_TO_CACHE);
    })
  );
});

// Durante a ativação do Service Worker, removemos caches antigos
self.addEventListener('activate', (event) => {
  event.waitUntil(
    caches.keys().then((cacheNames) => {
      return Promise.all(
        cacheNames.map((cache) => {
          if (cache !== CACHE_NAME) {
            console.log('Removendo cache antigo:', cache);
            return caches.delete(cache);
          }
        })
      );
    })
  );
});

// Durante o fetch, serve apenas o conteúdo do cache
self.addEventListener('fetch', (event) => {
  event.respondWith(
    caches.match(event.request).then((cachedResponse) => {
      if (cachedResponse) {
        // Sempre usa o cache
        return cachedResponse;
      }

      // Se o arquivo não estiver no cache (improvável), retorna um erro
      return new Response('Arquivo offline não disponível', {
        status: 404,
        statusText: 'Offline',
      });
    })
  );
});

// Atualização semanal do cache
self.addEventListener('sync', async (event) => {
  if (event.tag === 'weekly-update') {
    console.log('Iniciando atualização semanal...');
    event.waitUntil(updateCacheIfNecessary());
  }
});

// Verifica se já passou uma semana desde a última atualização
async function updateCacheIfNecessary() {
  const now = Date.now();
  const lastUpdate = await getLastUpdate();

  if (!lastUpdate || now - lastUpdate >= 7 * 24 * 60 * 60 * 1000) {
    console.log('Mais de uma semana desde a última atualização. Atualizando...');
    const cache = await caches.open(CACHE_NAME);
    for (const url of FILES_TO_CACHE) {
      try {
        const response = await fetch(url);
        if (response.ok) {
          await cache.put(url, response);
        }
      } catch (error) {
        console.error(`Erro ao atualizar o arquivo ${url}:`, error);
      }
    }
    await setLastUpdate(now);
  } else {
    console.log('Menos de uma semana desde a última atualização. Sem ação.');
  }
}

// Funções auxiliares para manipular a data de última atualização
async function getLastUpdate() {
  const cache = await caches.open(CACHE_NAME);
  const response = await cache.match(LAST_UPDATE_KEY);
  if (response) {
    const text = await response.text();
    return parseInt(text, 10);
  }
  return null;
}

async function setLastUpdate(timestamp) {
  const cache = await caches.open(CACHE_NAME);
  await cache.put(
    LAST_UPDATE_KEY,
    new Response(timestamp.toString(), { status: 200 })
  );
}
