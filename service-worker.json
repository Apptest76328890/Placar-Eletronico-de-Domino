// Nome do cache
const CACHE_NAME = 'placar-dominio-v1';

// URLs completas para o conteúdo online
const FILES_TO_CACHE = [
  'https://store-app.github.io/Placar-Eletronico-de-Domino/index.html',        // Arquivo principal
  'https://store-app.github.io/Placar-Eletronico-de-Domino/style.css',         // Arquivo de estilo
  'https://store-app.github.io/Placar-Eletronico-de-Domino/script.js',         // Script JavaScript
  'https://store-app.github.io/Placar-Eletronico-de-Domino/icon-192x192.png',  // Ícone de 192x192
  'https://store-app.github.io/Placar-Eletronico-de-Domino/icon-512x512.png',  // Ícone de 512x512
  'https://store-app.github.io/Placar-Eletronico-de-Domino/icon-undo.png',     // Ícone de desfazer
  'https://store-app.github.io/Placar-Eletronico-de-Domino/manifest.json',     // Manifesto PWA
];

// Durante a instalação do Service Worker, os arquivos serão armazenados no cache
self.addEventListener('install', (event) => {
  event.waitUntil(
    caches.open(CACHE_NAME).then((cache) => {
      console.log('Baixando arquivos para o cache pela primeira vez...');
      return cache.addAll(FILES_TO_CACHE);
    })
  );
});

// Durante a ativação do Service Worker, removemos caches antigos
self.addEventListener('activate', (event) => {
  event.waitUntil(
    caches.keys().then((cacheNames) => {
      return Promise.all(
        cacheNames.map((cache) => {
          if (cache !== CACHE_NAME) {
            console.log('Removendo cache antigo:', cache);
            return caches.delete(cache);
          }
        })
      );
    })
  );
});

// Durante o fetch, serve sempre os arquivos do cache, e se não encontrar, impede a busca na rede
self.addEventListener('fetch', (event) => {
  event.respondWith(
    caches.match(event.request).then((cachedResponse) => {
      // Se o arquivo está no cache, serve ele
      if (cachedResponse) {
        return cachedResponse;
      }

      // Se o arquivo não está no cache, e o usuário está offline, mostra um erro
      if (!navigator.onLine) {
        return new Response('Você está offline. O conteúdo não está disponível.', {
          status: 503, // Service Unavailable
          statusText: 'Offline',
        });
      }

      // Caso contrário, tenta fazer a requisição pela rede (somente se online)
      return fetch(event.request).catch(() => {
        return new Response('Erro ao carregar o conteúdo.', {
          status: 500,
          statusText: 'Network Error',
        });
      });
    })
  );
});
